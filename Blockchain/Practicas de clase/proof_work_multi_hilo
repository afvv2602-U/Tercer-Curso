import hashlib
import concurrent.futures

def search_nonce(starting_value, increment_by, transaction_string, target_prefix='00000'):
    current_value = starting_value
    while True:
        combined_string = f"{current_value}{transaction_string}".encode('utf-8')
        hashed_value = hashlib.sha256(combined_string).hexdigest()

        if hashed_value.startswith(target_prefix):
            return current_value, hashed_value

        current_value += increment_by

def run_parallel_search(thread_count):
    transaction_string = "Alicia -> Bob 15 pavos"
    with concurrent.futures.ThreadPoolExecutor(max_workers=thread_count) as executor:
        # Iniciar múltiples threads, cada uno buscando el nonce con diferentes valores iniciales.
        futures = [executor.submit(search_nonce, idx, thread_count, transaction_string) for idx in range(thread_count)]

        # Retornar el resultado del primer thread que termine
        for future in concurrent.futures.as_completed(futures):
            found_nonce, hash_result = future.result()
            return found_nonce, hash_result

if __name__ == "__main__":
    total_threads = 128  # Puedes modificar esto según tus necesidades.
    found_nonce, hash_result = run_parallel_search(total_threads)
    print(f"Nonce: {found_nonce}")
    print(f"Hash: {hash_result}")
